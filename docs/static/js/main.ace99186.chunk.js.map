{"version":3,"sources":["_helpers/localStorage.ts","molecules/DataRow.tsx","organisms/DataTable.tsx","atoms/MarkDropZone.tsx","_helpers/parseDatFile.ts","templates/HomeLayout.tsx","pages/HomeRoute.tsx","App.js","serviceWorker.js","index.js"],"names":["hasWindow","window","DataRow","rowData","currentStartDate","reservationUrl","distanceDrove","protection_level","id","useState","key","showWarning","returnData","localData","localStorage","getItem","localDataJSON","JSON","parse","e","console","warn","localStorageLoad","bigMoney","setBigMoney","updateBigMoney","useCallback","target","value","obj","saveObj","stringify","setItem","localStorageSave","href","type","onChange","DataTable","label","tabularData","border","style","width","map","droppedMyZoneStyles","margin","padding","textAlign","cursor","MarkDropZone","setFileData","onDrop","newFiles","newFile","whatYouReadinFor","FileReader","name","onload","jason","result","ex","alert","readAsText","getRootProps","getInputProps","getMilesFromString","milesString","replace","hashCode","s","i","h","length","Math","imul","charCodeAt","HomeLayout","fileData","host","rawFileData","isHost","eventData","current","reservation_check_in","reservation_state","invoices","reservation_url","eventDate","Date","trip_start","datObject","toLocaleString","driverUrl","sketchyData","timestamp","valueOf","start","owner_check_in_odometer_reading","end","owner_check_out_odometer_reading","parseDatFile","as_host","Fragment","HomeRoute","someBeautifulHeadingStyles","color","transform","textDecoration","excalmationStyles","Oomf","className","data-nessesary","App","data-aesthetics","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ace99186.chunk.js","sourcesContent":["/**\r\n * Save an object to localStorage as a JSON string\r\n * @param {str} key The unique key you want to over/write to localStorage (prefixed with \"mark-\")\r\n * @param {obj} state The object you want to save to this key\r\n * @param {bool} showWarning Defaulted to if window is undefined, enables console.warn when true if we cannot save\r\n */\r\nconst hasWindow = (typeof window !== 'undefined')\r\n\r\nexport const localStorageSave = (key, obj, showWarning=hasWindow) => {\r\n  try {\r\n    const saveObj = JSON.stringify(obj)\r\n    localStorage.setItem(`mark-${key}`, saveObj)\r\n  } catch (e) {\r\n    if (showWarning) {\r\n      console.warn('[localStorageSave] not accessible to save')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Load and parse a JSON string from localStorage\r\n * @param {str} key The key you want to load from\r\n * localStorage (prefixed with \"mark-\")\r\n * @returns {obj} the parsed object from lcoalStorage\r\n * @param {bool} showWarning Defaulted to if window is undefined, enables console.warn when true if we cannot save\r\n */\r\n\r\nexport const localStorageLoad = (key, showWarning=hasWindow) => {\r\n  let returnData = {}\r\n  try {\r\n    const localData = localStorage.getItem('mark-'+key)\r\n    if (localData) {\r\n      const localDataJSON = JSON.parse(localData)\r\n      if (localDataJSON) {\r\n        returnData = localDataJSON\r\n      }\r\n    }\r\n  } catch (e) {\r\n    if (showWarning) {\r\n      console.warn('[localStorageLoad] not accessible to load')\r\n    }\r\n  }\r\n  return returnData\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\n\r\nimport { localStorageSave, localStorageLoad } from './../_helpers/localStorage'\r\n\r\ninterface Props {\r\n  rowData: {\r\n    currentStartDate: string\r\n    reservationUrl: string\r\n    distanceDrove: number\r\n    protection_level: string\r\n    id: string\r\n  }\r\n}\r\n\r\nconst DataRow = ({ rowData }: React.FC<Props>) => {\r\n  const {\r\n    currentStartDate,\r\n    reservationUrl,\r\n    distanceDrove,\r\n    protection_level,\r\n    id,\r\n  } = rowData || {}\r\n\r\n  const [bigMoney, setBigMoney] = useState(localStorageLoad(id) || 0)\r\n\r\n  const updateBigMoney = useCallback(e => {\r\n    const { value = 0 } = (e || {}).target\r\n\r\n    localStorageSave(id, value, false)\r\n    setBigMoney(value)\r\n  }, [setBigMoney, id])\r\n\r\n  return <tr>\r\n    <td>{currentStartDate}</td>\r\n    <td><a href={reservationUrl}>{reservationUrl}</a></td>\r\n    <td>{distanceDrove}</td>\r\n    <td>{protection_level}</td>\r\n    <td><input value={bigMoney} type=\"number\" onChange={updateBigMoney} /></td>\r\n  </tr>\r\n}\r\n\r\nexport default DataRow\r\n","import React from 'react'\r\n\r\nimport DataRow from './../molecules/DataRow'\r\n\r\nconst DataTable = ({label=\"\", tabularData = []}) => {\r\n  if(!tabularData) {\r\n    return <h2>Please upload your reservations json file</h2>\r\n  }\r\n\r\n  return <table border=\"1\" style={{width: '100%'}}>\r\n    <caption>{label} Data Summary</caption>\r\n    <thead>\r\n      <tr>\r\n        <th>Dayte</th>\r\n        <th>Lynk</th>\r\n        <th>Distaence</th>\r\n        <th>Protection Level?</th>\r\n        <th>Earn'ins</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {tabularData.map(rowData => {\r\n        const {id} = rowData\r\n        return <DataRow key={id} rowData={rowData} />\r\n      })}\r\n    </tbody>\r\n  </table>\r\n}\r\n\r\nexport default DataTable\r\n","import React, { useCallback } from 'react'\r\n\r\nimport Dropzone from 'react-dropzone'\r\n\r\nconst droppedMyZoneStyles = {\r\n  border:'dashed 4px orange',\r\n  margin: '0 4px 44px 4px',\r\n  padding: '0 44px',\r\n  textAlign:'center',\r\n  cursor: 'pointer',\r\n}\r\n\r\nconst MarkDropZone = ({setFileData}) => {\r\n  const onDrop = useCallback(newFiles => {\r\n    const newFile = newFiles[0]\r\n    const whatYouReadinFor = new FileReader()\r\n\r\n    if (newFile.name==='reservations.json') {\r\n      whatYouReadinFor.onload = (() => e => {\r\n        try {\r\n          const jason = JSON.parse(e.target.result);\r\n          setFileData(jason)\r\n        } catch (ex) {\r\n          alert('Error trying to parse JSON. Maybe download it from remote again?');\r\n        }\r\n      })();\r\n      whatYouReadinFor.readAsText(newFile)\r\n    } else { alert('wrong file, bro, I want \"reservations.json\"') }\r\n  }, [setFileData])\r\n\r\n  return     <Dropzone onDrop={onDrop}>\r\n  {({getRootProps, getInputProps}) => (\r\n    <section style={droppedMyZoneStyles}>\r\n      <div {...getRootProps()}>\r\n        <input {...getInputProps()} />\r\n        <p>You may drag and or maybe drop some filez right over 'ere. You can also <strong>click</strong> to select files with your native web browsers file picker functionality that is baked into the browser okay</p>\r\n      </div>\r\n    </section>\r\n  )}\r\n</Dropzone>\r\n\r\n}\r\n\r\nexport default MarkDropZone\r\n","const getMilesFromString = milesString => +milesString.replace(/[^\\d.-]/g, '')\r\n\r\nconst hashCode = s => {\r\n  for(var i = 0, h = 0; i < s.length; i++)\r\n      h = Math.imul(31, h) + s.charCodeAt(i) | 0;\r\n  return h;\r\n}\r\n\r\nexport const parseDatFile = (rawFileData = [], isHost=true) => rawFileData.map(eventData => {\r\n  if (!isHost) {\r\n    eventData = eventData.current\r\n  }\r\n  const {\r\n    reservation_check_in,\r\n    protection_level = 'Not Found',\r\n    reservation_state = {},\r\n    invoices: { current = [] } = {},\r\n    reservation_url,\r\n  } = eventData || {}\r\n\r\n  const eventDate = new Date(reservation_state.trip_start)\r\n  const datObject = {\r\n    currentStartDate: eventDate.toLocaleString(),\r\n    bigMoney: current,\r\n    distanceDrove: -1,\r\n    driverUrl: eventData[(isHost ? 'guest_url' : 'host_url')],\r\n    id: hashCode(reservation_url),\r\n    protection_level,\r\n    reservationUrl: reservation_url,\r\n    sketchyData: true,\r\n    timestamp: eventDate.valueOf(),\r\n  }\r\n\r\n  const start = getMilesFromString(reservation_check_in.owner_check_in_odometer_reading)\r\n  const end = getMilesFromString(reservation_check_in.owner_check_out_odometer_reading)\r\n  if (start && end) {\r\n    if(start < end) { datObject.sketchyData = false }\r\n    datObject.distanceDrove = end - start\r\n  }\r\n\r\n  return datObject\r\n})\r\n","import React, { useState } from 'react'\r\n\r\nimport DataTable from './../organisms/DataTable'\r\nimport MarkDropZone from './../atoms/MarkDropZone'\r\n\r\nimport {parseDatFile} from './../_helpers/parseDatFile'\r\n\r\nconst HomeLayout = () => {\r\n  const [fileData, setFileData] = useState({})\r\n  \r\n  const host = parseDatFile(fileData.as_host)\r\n  // const traveler = parseDatFile(fileData.as_traveler, false)\r\n\r\n  return <React.Fragment>\r\n    <MarkDropZone setFileData={setFileData} />\r\n    {/* <DataTable label=\"Traveler\" tabularData={traveler} /> */}\r\n    <DataTable label=\"Host\" tabularData={host} />\r\n\r\n  </React.Fragment>\r\n}\r\n\r\nexport default HomeLayout\r\n","import React from 'react'\r\n\r\nimport HomeLayout from './../templates/HomeLayout'\r\n\r\nconst HomeRoute = () => {\r\n  return <HomeLayout />\r\n}\r\n\r\nexport default HomeRoute\r\n","import React from 'react'\r\n\r\nimport HomeRoute from './pages/HomeRoute'\r\n\r\nconst someBeautifulHeadingStyles = {\r\n  color:'magenta',\r\n  textAlign:'center',\r\n  transform: 'rotate(-10deg)',\r\n  textDecoration: 'overline underline',\r\n}\r\n\r\nconst excalmationStyles = {\r\n  textDecoration: 'line-through',\r\n  color: 'purple'\r\n}\r\n\r\nconst Oomf = () => <span className=\"fancyPantsSpin\" data-nessesary=\"yes\" style={excalmationStyles}>!</span>\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 style={someBeautifulHeadingStyles} data-aesthetics=\"lovely\">\r\n        <Oomf />Oh hi Mark<Oomf />\r\n      </h1>\r\n      <HomeRoute />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}