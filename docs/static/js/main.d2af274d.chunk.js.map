{"version":3,"sources":["_helpers/localStorage.ts","molecules/DataRow.tsx","organisms/DataTable.tsx","atoms/TheSummaryAnalytics.tsx","atoms/MarkDropZone.tsx","_helpers/parseDatFile.ts","templates/HomeLayout.tsx","pages/HomeRoute.tsx","App.js","serviceWorker.js","index.js"],"names":["hasWindow","window","localStorageSave","key","obj","showWarning","saveObj","JSON","stringify","localStorage","setItem","e","console","warn","localStorageLoad","returnData","localData","getItem","localDataJSON","parse","DataRow","rowData","currentStartDate","reservationUrl","distanceDrove","id","triggerNewRender","useContext","NewRenderContext","useState","bigMoney","setBigMoney","updateBigMoney","useCallback","target","value","href","type","onChange","DataTable","label","tabularData","length","border","style","width","role","aria-label","map","Fragment","TheSummaryAnalytics","data","fullRowsOnly","setFullRowsOnly","numForcedRender","handleCheckbox","newValue","getRevenue","parseInt","parsedData","useMemo","displayData","countedRecords","averageMileage","averageRevenue","tempData","distance","revenue","tempCounts","forEach","toFixed","log","checked","droppedMyZoneStyles","margin","padding","textAlign","cursor","MarkDropZone","setFileData","onDrop","newFiles","newFile","whatYouReadinFor","FileReader","name","onload","jason","result","ex","alert","readAsText","getRootProps","getInputProps","getMilesFromString","milesString","replace","hashCode","s","i","h","Math","imul","charCodeAt","HomeLayout","fileData","host","rawFileData","isHost","eventData","current","reservation_check_in","protection_level","reservation_state","invoices","reservation_url","eventDate","Date","trip_start","datObject","toLocaleString","driverUrl","sketchyData","timestamp","valueOf","start","owner_check_in_odometer_reading","end","owner_check_out_odometer_reading","parseDatFile","as_host","React","createContext","HomeRoute","setNumForcedRender","Provider","newNumberOfRenders","someBeautifulHeadingStyles","color","transform","textDecoration","excalmationStyles","Oomf","className","data-nessesary","App","data-aesthetics","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2af274d.chunk.js","sourcesContent":["/**\r\n * Save an object to localStorage as a JSON string\r\n * @param {str} key The unique key you want to over/write to localStorage (prefixed with \"mark-\")\r\n * @param {obj} state The object you want to save to this key\r\n * @param {bool} showWarning Defaulted to if window is undefined, enables console.warn when true if we cannot save\r\n */\r\nconst hasWindow = (typeof window !== 'undefined')\r\n\r\nexport const localStorageSave = (key, obj, showWarning=hasWindow) => {\r\n  try {\r\n    const saveObj = JSON.stringify(obj)\r\n    localStorage.setItem(`mark-${key}`, saveObj)\r\n  } catch (e) {\r\n    if (showWarning) {\r\n      console.warn('[localStorageSave] not accessible to save')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Load and parse a JSON string from localStorage\r\n * @param {str} key The key you want to load from\r\n * localStorage (prefixed with \"mark-\")\r\n * @returns {obj} the parsed object from lcoalStorage\r\n * @param {bool} showWarning Defaulted to if window is undefined, enables console.warn when true if we cannot save\r\n */\r\n\r\nexport const localStorageLoad: any = (key, showWarning=hasWindow) => {\r\n  let returnData = {}\r\n  try {\r\n    const localData = localStorage.getItem('mark-'+key)\r\n    if (localData) {\r\n      const localDataJSON = JSON.parse(localData)\r\n      if (localDataJSON) {\r\n        returnData = localDataJSON\r\n      }\r\n    }\r\n  } catch (e) {\r\n    if (showWarning) {\r\n      console.warn('[localStorageLoad] not accessible to load')\r\n    }\r\n  }\r\n  return returnData\r\n}\r\n","import React, { useCallback, useContext, useState } from 'react'\r\n\r\nimport { localStorageSave, localStorageLoad } from './../_helpers/localStorage'\r\nimport { NewRenderContext } from './../pages/HomeRoute'\r\n\r\ninterface Props {\r\n  rowData: {\r\n    currentStartDate: string\r\n    reservationUrl: string\r\n    distanceDrove: number\r\n    protection_level: string\r\n    id: string\r\n  }\r\n}\r\n\r\nconst DataRow = ({ rowData }: React.FC<Props>) => {\r\n  const {\r\n    currentStartDate,\r\n    reservationUrl,\r\n    distanceDrove,\r\n    id,\r\n  } = rowData || {}\r\n  const { triggerNewRender } = useContext(NewRenderContext)\r\n\r\n  const [bigMoney, setBigMoney] = useState(localStorageLoad(id) || 0)\r\n\r\n  const updateBigMoney = useCallback(e => {\r\n    const { value = 0 } = (e || {}).target\r\n\r\n    localStorageSave(id, value, false)\r\n    setBigMoney(value)\r\n    triggerNewRender()\r\n  }, [id, setBigMoney, triggerNewRender])\r\n\r\n  return <tr>\r\n    <td>{currentStartDate}</td>\r\n    <td><a href={reservationUrl}>{reservationUrl}</a></td>\r\n    <td>{distanceDrove}</td>\r\n    <td><input value={bigMoney} type=\"number\" onChange={updateBigMoney} /></td>\r\n  </tr>\r\n}\r\n\r\nexport default DataRow\r\n","import React from 'react'\r\n\r\nimport DataRow from './../molecules/DataRow'\r\n\r\nconst DataTable = ({label=\"\", tabularData = []}) => {\r\n  if(!tabularData) {\r\n    return <h2>Please upload your reservations json file</h2>\r\n  }\r\n\r\n  return !tabularData.length \r\n    ? <React.Fragment />\r\n    : <table border=\"1\" style={{width: '100%'}}>\r\n      <caption><h2>{label} Data Summary</h2></caption>\r\n      <thead>\r\n        <tr>\r\n          <th><span role=\"img\" aria-label=\"Date\">📅</span></th>\r\n          <th><span role=\"img\" aria-label=\"Reservation link\">🔗</span></th>\r\n          <th><span role=\"img\" aria-label=\"Distance\">🛣️</span></th>\r\n          <th><span role=\"img\" aria-label=\"Revenue\">💰</span></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {tabularData.map(rowData => {\r\n          const {id} = rowData\r\n          return <DataRow key={id} rowData={rowData} />\r\n        })}\r\n      </tbody>\r\n    </table>\r\n}\r\n\r\nexport default DataTable\r\n","import React, { useCallback, useContext, useMemo, useState } from 'react'\r\n\r\nimport { NewRenderContext } from './../pages/HomeRoute'\r\nimport { localStorageSave, localStorageLoad } from './../_helpers/localStorage'\r\n\r\nconst LOCAL_STORAGE_KEY = 'full rows checkbox state'\r\n\r\nconst TheSummaryAnalytics = ({ data }) => {\r\n  const [fullRowsOnly, setFullRowsOnly] = useState(localStorageLoad(LOCAL_STORAGE_KEY) || false)\r\n  const { numForcedRender } = useContext(NewRenderContext)\r\n\r\n  const handleCheckbox = useCallback(() => {\r\n    const newValue = !fullRowsOnly\r\n    localStorageSave(LOCAL_STORAGE_KEY, newValue, false)\r\n    setFullRowsOnly(newValue)\r\n  }, [fullRowsOnly, setFullRowsOnly])\r\n\r\n  const getRevenue = useCallback(id => parseInt(localStorageLoad(id) )|| -1, [])\r\n\r\n  const parsedData = useMemo(() => {\r\n    const displayData = { countedRecords: 0, averageMileage: -1, averageRevenue: -1 }\r\n    const tempData = { distance: 0, revenue: 0 }\r\n    const tempCounts = { distance: 0, revenue: 0, tempData }\r\n      data.forEach(({ distanceDrove, id }) => {\r\n      const revenue: number = getRevenue(id)\r\n      if(fullRowsOnly) {\r\n        if (distanceDrove > 0 && revenue > 0) {\r\n          displayData.countedRecords++\r\n          tempCounts.distance++\r\n          tempData.distance += distanceDrove\r\n          tempCounts.revenue++\r\n          tempData.revenue += revenue\r\n        }\r\n      } else if(distanceDrove > 0 || revenue > 0) {\r\n        displayData.countedRecords++\r\n        if (distanceDrove) {\r\n          tempCounts.distance++\r\n          tempData.distance += distanceDrove\r\n        }\r\n        if (revenue) {\r\n          tempCounts.revenue++\r\n          tempData.revenue += revenue\r\n        }\r\n      }\r\n    })\r\n      displayData.averageMileage = +(tempData.distance / tempCounts.distance).toFixed(2)\r\n      displayData.averageRevenue = +(tempData.revenue / tempCounts.revenue).toFixed(2)\r\n      return displayData\r\n      // eslint-disable-next-line \r\n  }, [data, fullRowsOnly, getRevenue, numForcedRender])\r\n\r\n  console.log({ data, parsedData })\r\n\r\n  return parsedData.countedRecords === 0\r\n    ? <React.Fragment />\r\n    : <React.Fragment>\r\n        <table border=\"4\" style={{width:'100%'}}>\r\n          <caption>\r\n            <h1>Analytitiks</h1>\r\n            <label>\r\n              <input type=\"checkbox\" checked={fullRowsOnly} onChange={handleCheckbox} />\r\n              <span>Only calculate when <span role=\"img\" aria-label=\"Mileage\">🛣️</span> <strong>and</strong> <span role=\"img\" aria-label=\"Revenue\">💰</span> have values. Otherwise, calculate when either is present.</span>\r\n            </label>\r\n          </caption>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th><span role=\"img\" aria-label=\"Mileage\">🛣️</span></th>\r\n              <th><span role=\"img\" aria-label=\"Revenue\">💰</span></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{parsedData.countedRecords}</td>\r\n              <td>{parsedData.averageMileage}</td>\r\n              <td>{parsedData.averageRevenue}</td>\r\n            </tr>\r\n          </tbody>\r\n      </table>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default TheSummaryAnalytics\r\n","import React, { useCallback } from 'react'\r\n\r\nimport Dropzone from 'react-dropzone'\r\n\r\nconst droppedMyZoneStyles = {\r\n  border:'dashed 4px orange',\r\n  margin: '0 4px 44px 4px',\r\n  padding: '0 44px',\r\n  textAlign:'center',\r\n  cursor: 'pointer',\r\n}\r\n\r\nconst MarkDropZone = ({setFileData}) => {\r\n  const onDrop = useCallback(newFiles => {\r\n    const newFile = newFiles[0]\r\n    const whatYouReadinFor = new FileReader()\r\n\r\n    if (newFile.name==='reservations.json') {\r\n      whatYouReadinFor.onload = (() => e => {\r\n        try {\r\n          const jason = JSON.parse(e.target.result);\r\n          setFileData(jason)\r\n        } catch (ex) {\r\n          alert('Error trying to parse JSON. Maybe download it from remote again?');\r\n        }\r\n      })();\r\n      whatYouReadinFor.readAsText(newFile)\r\n    } else { alert('wrong file, bro, I want \"reservations.json\"') }\r\n  }, [setFileData])\r\n\r\n  return     <Dropzone onDrop={onDrop}>\r\n  {({getRootProps, getInputProps}) => (\r\n    <section style={droppedMyZoneStyles}>\r\n      <div {...getRootProps()}>\r\n        <input {...getInputProps()} />\r\n        <p>You may drag and or maybe drop some filez right over 'ere. You can also <strong>click</strong> to select files with your native web browsers file picker functionality that is baked into the browser okay</p>\r\n      </div>\r\n    </section>\r\n  )}\r\n</Dropzone>\r\n\r\n}\r\n\r\nexport default MarkDropZone\r\n","const getMilesFromString = milesString => +milesString.replace(/[^\\d.-]/g, '')\r\n\r\nconst hashCode = s => {\r\n  for(var i = 0, h = 0; i < s.length; i++)\r\n      h = Math.imul(31, h) + s.charCodeAt(i) | 0;\r\n  return h;\r\n}\r\n\r\nexport const parseDatFile = (rawFileData = [], isHost=true) => rawFileData.map(eventData => {\r\n  if (!isHost) {\r\n    eventData = eventData.current\r\n  }\r\n  const {\r\n    reservation_check_in,\r\n    protection_level = 'Not Found',\r\n    reservation_state = {},\r\n    invoices: { current = [] } = {},\r\n    reservation_url,\r\n  } = eventData || {}\r\n\r\n  const eventDate = new Date(reservation_state.trip_start)\r\n  const datObject = {\r\n    currentStartDate: eventDate.toLocaleString(),\r\n    bigMoney: current,\r\n    distanceDrove: -1,\r\n    driverUrl: eventData[(isHost ? 'guest_url' : 'host_url')],\r\n    id: hashCode(reservation_url),\r\n    protection_level,\r\n    reservationUrl: reservation_url,\r\n    sketchyData: true,\r\n    timestamp: eventDate.valueOf(),\r\n  }\r\n\r\n  const start = getMilesFromString(reservation_check_in.owner_check_in_odometer_reading)\r\n  const end = getMilesFromString(reservation_check_in.owner_check_out_odometer_reading)\r\n  if (start && end) {\r\n    if(start < end) { datObject.sketchyData = false }\r\n    datObject.distanceDrove = end - start\r\n  }\r\n\r\n  return datObject\r\n})\r\n","import React, { useState } from 'react'\r\n\r\nimport DataTable from './../organisms/DataTable'\r\nimport TheSummaryAnalytics from './../atoms/TheSummaryAnalytics'\r\nimport MarkDropZone from './../atoms/MarkDropZone'\r\n\r\nimport { parseDatFile } from './../_helpers/parseDatFile'\r\n\r\nconst HomeLayout = () => {\r\n  const [fileData, setFileData] = useState({})\r\n  \r\n  const host = parseDatFile(fileData.as_host)\r\n  // const traveler = parseDatFile(fileData.as_traveler, false)\r\n\r\n  return <React.Fragment>\r\n    <MarkDropZone setFileData={setFileData} />\r\n    <TheSummaryAnalytics data={host} />\r\n    <DataTable label=\"Host\" tabularData={host} />\r\n    {/* <DataTable label=\"Traveler\" tabularData={traveler} /> */}\r\n    </React.Fragment>\r\n}\r\n\r\nexport default HomeLayout\r\n","import React, { useState } from 'react'\r\n\r\nimport HomeLayout from './../templates/HomeLayout'\r\n\r\nexport const NewRenderContext = React.createContext(() => {})\r\n\r\nconst HomeRoute = () => {\r\n  const [numForcedRender, setNumForcedRender] = useState(0)\r\n  const triggerNewRender = () => {\r\n    const newNumberOfRenders = numForcedRender + 1\r\n    console.log({ newNumberOfRenders })\r\n    setNumForcedRender(newNumberOfRenders)\r\n  }\r\n\r\n  return <NewRenderContext.Provider value={{numForcedRender, triggerNewRender}}>\r\n    <HomeLayout />\r\n  </NewRenderContext.Provider>\r\n}\r\n\r\nexport default HomeRoute\r\n","import React from 'react'\r\n\r\nimport HomeRoute from './pages/HomeRoute'\r\n\r\nconst someBeautifulHeadingStyles = {\r\n  color:'magenta',\r\n  textAlign:'center',\r\n  transform: 'rotate(-10deg)',\r\n  textDecoration: 'overline underline',\r\n}\r\n\r\nconst excalmationStyles = {\r\n  textDecoration: 'line-through',\r\n  color: 'purple'\r\n}\r\n\r\nconst Oomf = () => <span className=\"fancyPantsSpin\" data-nessesary=\"yes\" style={excalmationStyles}>!</span>\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 style={someBeautifulHeadingStyles} data-aesthetics=\"lovely\">\r\n        <Oomf />Oh hi Mark<Oomf />\r\n      </h1>\r\n      <HomeRoute />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}